version: "3.9"

services:
  label-reporter:
    image: alpine:latest
    container_name: homelab-label-reporter
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./reports:/reports
    environment:
      - REPORT_INTERVAL=30
      - EDGE_SERVER_URL=http://edge-server:8080
    command: |
      sh -c '
      apk add --no-cache curl jq
      
      while true; do
        echo "Scanning for containers with Caddy labels..."
        
        # Get all running containers with caddy.expose=true
        containers=$(docker ps --format "{{.Names}}" | while read name; do
          if docker inspect "$name" --format "{{.Config.Labels.caddy.expose}}" | grep -q "true"; then
            echo "$name"
          fi
        done)
        
        # Generate report for each container
        report=""
        for container in $containers; do
          labels=$(docker inspect "$container" --format "{{json .Config.Labels}}")
          name=$(docker inspect "$container" --format "{{.Name}}")
          
          # Extract Caddy labels
          expose=$(echo "$labels" | jq -r ".caddy.expose // empty")
          path=$(echo "$labels" | jq -r ".caddy.path // empty")
          host_port=$(echo "$labels" | jq -r ".caddy.host_port // empty")
          root=$(echo "$labels" | jq -r ".caddy.root // empty")
          fqdn=$(echo "$labels" | jq -r ".caddy.fqdn // empty")
          
          if [[ "$expose" == "true" ]]; then
            # Get container port mapping
            port_mapping=$(docker port "$container" 2>/dev/null | head -1 | cut -d: -f2 || echo "")
            
            # If no host_port specified, try to derive from port mapping
            if [[ -z "$host_port" && -n "$port_mapping" ]]; then
              host_port="$port_mapping"
            fi
            
            # Add to report
            service_report=$(cat <<EOF
{
  "name": "$name",
  "path": "$path",
  "host_port": "$host_port",
  "root": "$root",
  "fqdn": "$fqdn",
  "source": "docker-inspect",
  "container_id": "$(docker inspect "$container" --format "{{.Id}}")"
}
EOF
)
            report="$report$service_report"$'\n'
          fi
        done
        
        # Write report to file
        echo "$report" > /reports/caddy-services.json
        
        echo "Report generated with $(echo "$report" | wc -l) services"
        
        # Sleep before next scan
        sleep ${REPORT_INTERVAL:-30}
      done
      '
    restart: unless-stopped
    networks:
      - homelab-net

networks:
  homelab-net:
    external: true
